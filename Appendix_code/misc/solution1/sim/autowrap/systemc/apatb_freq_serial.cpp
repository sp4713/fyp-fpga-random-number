// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.1
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// ==============================================================

#define AP_INT_MAX_W 32678

#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"
#include "ap_int.h"
#include "ap_fixed.h"
#include <complex>
#include <stdbool.h>
#include "autopilot_cbe.h"
#include "ap_stream.h"
#include "hls_stream.h"
#include "hls_half.h"
#include "hls_signal_handler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


// [dump_struct_tree [build_nameSpaceTree] dumpedStructList] ---------->


// [dump_enumeration [get_enumeration_list]] ---------->


// wrapc file define: "freqStream_V"
#define AUTOTB_TVOUT_freqStream_V  "../tv/cdatafile/c.freq_serial.autotvout_freqStream_V.dat"
// wrapc file define: "serialTwoStream_V"
#define AUTOTB_TVOUT_serialTwoStream_V  "../tv/cdatafile/c.freq_serial.autotvout_serialTwoStream_V.dat"
// wrapc file define: "serialThreeStream_V"
#define AUTOTB_TVOUT_serialThreeStream_V  "../tv/cdatafile/c.freq_serial.autotvout_serialThreeStream_V.dat"
// wrapc file define: "seed_V"
#define AUTOTB_TVIN_seed_V  "../tv/cdatafile/c.freq_serial.autotvin_seed_V.dat"
// wrapc file define: "n_V"
#define AUTOTB_TVIN_n_V  "../tv/cdatafile/c.freq_serial.autotvin_n_V.dat"
// wrapc file define: "offset_V"
#define AUTOTB_TVIN_offset_V  "../tv/cdatafile/c.freq_serial.autotvin_offset_V.dat"

#define INTER_TCL  "../tv/cdatafile/ref.tcl"

// tvout file define: "freqStream_V"
#define AUTOTB_TVOUT_PC_freqStream_V  "../tv/rtldatafile/rtl.freq_serial.autotvout_freqStream_V.dat"
// tvout file define: "serialTwoStream_V"
#define AUTOTB_TVOUT_PC_serialTwoStream_V  "../tv/rtldatafile/rtl.freq_serial.autotvout_serialTwoStream_V.dat"
// tvout file define: "serialThreeStream_V"
#define AUTOTB_TVOUT_PC_serialThreeStream_V  "../tv/rtldatafile/rtl.freq_serial.autotvout_serialThreeStream_V.dat"

class INTER_TCL_FILE {
	public:
		INTER_TCL_FILE(const char* name) {
			mName = name;
			freqStream_V_depth = 0;
			serialTwoStream_V_depth = 0;
			serialThreeStream_V_depth = 0;
			seed_V_depth = 0;
			n_V_depth = 0;
			offset_V_depth = 0;
			trans_num =0;
		}

		~INTER_TCL_FILE() {
			mFile.open(mName);
			if (!mFile.good()) {
				cout << "Failed to open file ref.tcl" << endl;
				exit (1);
			}
			string total_list = get_depth_list();
			mFile << "set depth_list {\n";
			mFile << total_list;
			mFile << "}\n";
			mFile << "set trans_num "<<trans_num<<endl;
			mFile.close();
		}

		string get_depth_list () {
			stringstream total_list;
			total_list << "{freqStream_V " << freqStream_V_depth << "}\n";
			total_list << "{serialTwoStream_V " << serialTwoStream_V_depth << "}\n";
			total_list << "{serialThreeStream_V " << serialThreeStream_V_depth << "}\n";
			total_list << "{seed_V " << seed_V_depth << "}\n";
			total_list << "{n_V " << n_V_depth << "}\n";
			total_list << "{offset_V " << offset_V_depth << "}\n";
			return total_list.str();
		}

		void set_num (int num , int* class_num) {
			(*class_num) = (*class_num) > num ? (*class_num) : num;
		}
	public:
		int freqStream_V_depth;
		int serialTwoStream_V_depth;
		int serialThreeStream_V_depth;
		int seed_V_depth;
		int n_V_depth;
		int offset_V_depth;
		int trans_num;

	private:
		ofstream mFile;
		const char* mName;
};


#define freq_serial AESL_ORIG_DUT_freq_serial
extern void freq_serial (
ap_uint<32> freqStream[32],
ap_uint<32> serialTwoStream[96],
ap_uint<32> serialThreeStream[112],
ap_uint<32> seed,
ap_uint<44> n,
ap_uint<1> offset);
#undef freq_serial

void freq_serial (
ap_uint<32> freqStream[32],
ap_uint<32> serialTwoStream[96],
ap_uint<32> serialThreeStream[112],
ap_uint<32> seed,
ap_uint<44> n,
ap_uint<1> offset)
{
	refine_signal_handler();
	fstream wrapc_switch_file_token;
	wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");
	int AESL_i;
	if (wrapc_switch_file_token.good())
	{
		CodeState = ENTER_WRAPC_PC;
		static unsigned AESL_transaction_pc = 0;
		string AESL_token;
		string AESL_num;
		static AESL_FILE_HANDLER aesl_fh;


		// output port post check: "freqStream_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_freqStream_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_freqStream_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_freqStream_V, AESL_token); // data

			sc_bv<32> *freqStream_V_pc_buffer = new sc_bv<32>[32];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'freqStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'freqStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					freqStream_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_freqStream_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_freqStream_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: freqStream_V
				{
					// bitslice(31, 0)
					// {
						// celement: freqStream.V(31, 0)
						// {
							sc_lv<32>* freqStream_V_lv0_0_31_1 = new sc_lv<32>[32];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: freqStream.V(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								if (&(freqStream[0]) != NULL) // check the null address if the c port is array or others
								{
									freqStream_V_lv0_0_31_1[hls_map_index++].range(31, 0) = sc_bv<32>(freqStream_V_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: freqStream.V(31, 0)
						{
							// carray: (0) => (31) @ (1)
							for (int i_0 = 0; i_0 <= 31; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : freqStream[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : freqStream[0]
								// output_left_conversion : freqStream[i_0]
								// output_type_conversion : (freqStream_V_lv0_0_31_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(freqStream[0]) != NULL) // check the null address if the c port is array or others
								{
									freqStream[i_0] = (freqStream_V_lv0_0_31_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] freqStream_V_pc_buffer;
		}

		// output port post check: "serialTwoStream_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_serialTwoStream_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_serialTwoStream_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_serialTwoStream_V, AESL_token); // data

			sc_bv<32> *serialTwoStream_V_pc_buffer = new sc_bv<32>[96];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'serialTwoStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'serialTwoStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					serialTwoStream_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_serialTwoStream_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_serialTwoStream_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: serialTwoStream_V
				{
					// bitslice(31, 0)
					// {
						// celement: serialTwoStream.V(31, 0)
						// {
							sc_lv<32>* serialTwoStream_V_lv0_0_95_1 = new sc_lv<32>[96];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: serialTwoStream.V(31, 0)
						{
							// carray: (0) => (95) @ (1)
							for (int i_0 = 0; i_0 <= 95; i_0 += 1)
							{
								if (&(serialTwoStream[0]) != NULL) // check the null address if the c port is array or others
								{
									serialTwoStream_V_lv0_0_95_1[hls_map_index++].range(31, 0) = sc_bv<32>(serialTwoStream_V_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: serialTwoStream.V(31, 0)
						{
							// carray: (0) => (95) @ (1)
							for (int i_0 = 0; i_0 <= 95; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : serialTwoStream[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : serialTwoStream[0]
								// output_left_conversion : serialTwoStream[i_0]
								// output_type_conversion : (serialTwoStream_V_lv0_0_95_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(serialTwoStream[0]) != NULL) // check the null address if the c port is array or others
								{
									serialTwoStream[i_0] = (serialTwoStream_V_lv0_0_95_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] serialTwoStream_V_pc_buffer;
		}

		// output port post check: "serialThreeStream_V"
		aesl_fh.read(AUTOTB_TVOUT_PC_serialThreeStream_V, AESL_token); // [[transaction]]
		if (AESL_token != "[[transaction]]")
		{
			exit(1);
		}
		aesl_fh.read(AUTOTB_TVOUT_PC_serialThreeStream_V, AESL_num); // transaction number

		if (atoi(AESL_num.c_str()) == AESL_transaction_pc)
		{
			aesl_fh.read(AUTOTB_TVOUT_PC_serialThreeStream_V, AESL_token); // data

			sc_bv<32> *serialThreeStream_V_pc_buffer = new sc_bv<32>[112];
			int i = 0;

			while (AESL_token != "[[/transaction]]")
			{
				bool no_x = false;
				bool err = false;

				// search and replace 'X' with "0" from the 1st char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('X');
					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'serialThreeStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				no_x = false;

				// search and replace 'x' with "0" from the 3rd char of token
				while (!no_x)
				{
					size_t x_found = AESL_token.find('x', 2);

					if (x_found != string::npos)
					{
						if (!err)
						{
							cerr << "WARNING: [SIM 212-201] RTL produces unknown value 'X' on port 'serialThreeStream_V', possible cause: There are uninitialized variables in the C design." << endl;
							err = true;
						}
						AESL_token.replace(x_found, 1, "0");
					}
					else
					{
						no_x = true;
					}
				}

				// push token into output port buffer
				if (AESL_token != "")
				{
					serialThreeStream_V_pc_buffer[i] = AESL_token.c_str();
					i++;
				}

				aesl_fh.read(AUTOTB_TVOUT_PC_serialThreeStream_V, AESL_token); // data or [[/transaction]]

				if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_serialThreeStream_V))
				{
					exit(1);
				}
			}

			// ***********************************
			if (i > 0)
			{
				// RTL Name: serialThreeStream_V
				{
					// bitslice(31, 0)
					// {
						// celement: serialThreeStream.V(31, 0)
						// {
							sc_lv<32>* serialThreeStream_V_lv0_0_111_1 = new sc_lv<32>[112];
						// }
					// }

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: serialThreeStream.V(31, 0)
						{
							// carray: (0) => (111) @ (1)
							for (int i_0 = 0; i_0 <= 111; i_0 += 1)
							{
								if (&(serialThreeStream[0]) != NULL) // check the null address if the c port is array or others
								{
									serialThreeStream_V_lv0_0_111_1[hls_map_index++].range(31, 0) = sc_bv<32>(serialThreeStream_V_pc_buffer[hls_map_index].range(31, 0));
								}
							}
						}
					}

					// bitslice(31, 0)
					{
						int hls_map_index = 0;
						// celement: serialThreeStream.V(31, 0)
						{
							// carray: (0) => (111) @ (1)
							for (int i_0 = 0; i_0 <= 111; i_0 += 1)
							{
								// sub                    : i_0
								// ori_name               : serialThreeStream[i_0]
								// sub_1st_elem           : 0
								// ori_name_1st_elem      : serialThreeStream[0]
								// output_left_conversion : serialThreeStream[i_0]
								// output_type_conversion : (serialThreeStream_V_lv0_0_111_1[hls_map_index++]).to_string(SC_BIN).c_str()
								if (&(serialThreeStream[0]) != NULL) // check the null address if the c port is array or others
								{
									serialThreeStream[i_0] = (serialThreeStream_V_lv0_0_111_1[hls_map_index++]).to_string(SC_BIN).c_str();
								}
							}
						}
					}
				}
			}

			// release memory allocation
			delete [] serialThreeStream_V_pc_buffer;
		}

		AESL_transaction_pc++;
	}
	else
	{
		CodeState = ENTER_WRAPC;
		static unsigned AESL_transaction;

		static AESL_FILE_HANDLER aesl_fh;

		// "freqStream_V"
		char* tvout_freqStream_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_freqStream_V);

		// "serialTwoStream_V"
		char* tvout_serialTwoStream_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_serialTwoStream_V);

		// "serialThreeStream_V"
		char* tvout_serialThreeStream_V = new char[50];
		aesl_fh.touch(AUTOTB_TVOUT_serialThreeStream_V);

		// "seed_V"
		char* tvin_seed_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_seed_V);

		// "n_V"
		char* tvin_n_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_n_V);

		// "offset_V"
		char* tvin_offset_V = new char[50];
		aesl_fh.touch(AUTOTB_TVIN_offset_V);

		CodeState = DUMP_INPUTS;
		static INTER_TCL_FILE tcl_file(INTER_TCL);
		int leading_zero;

		// [[transaction]]
		sprintf(tvin_seed_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_seed_V, tvin_seed_V);

		sc_bv<32> seed_V_tvin_wrapc_buffer;

		// RTL Name: seed_V
		{
			// bitslice(31, 0)
			{
				// celement: seed.V(31, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : seed
						// sub_1st_elem          : 
						// ori_name_1st_elem     : seed
						// regulate_c_name       : seed_V
						// input_type_conversion : (seed).to_string(2).c_str()
						if (&(seed) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> seed_V_tmp_mem;
							seed_V_tmp_mem = (seed).to_string(2).c_str();
							seed_V_tvin_wrapc_buffer.range(31, 0) = seed_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_seed_V, "%s\n", (seed_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_seed_V, tvin_seed_V);
		}

		tcl_file.set_num(1, &tcl_file.seed_V_depth);
		sprintf(tvin_seed_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_seed_V, tvin_seed_V);

		// [[transaction]]
		sprintf(tvin_n_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_n_V, tvin_n_V);

		sc_bv<44> n_V_tvin_wrapc_buffer;

		// RTL Name: n_V
		{
			// bitslice(43, 0)
			{
				// celement: n.V(43, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : n
						// sub_1st_elem          : 
						// ori_name_1st_elem     : n
						// regulate_c_name       : n_V
						// input_type_conversion : (n).to_string(2).c_str()
						if (&(n) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<44> n_V_tmp_mem;
							n_V_tmp_mem = (n).to_string(2).c_str();
							n_V_tvin_wrapc_buffer.range(43, 0) = n_V_tmp_mem.range(43, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_n_V, "%s\n", (n_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_n_V, tvin_n_V);
		}

		tcl_file.set_num(1, &tcl_file.n_V_depth);
		sprintf(tvin_n_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_n_V, tvin_n_V);

		// [[transaction]]
		sprintf(tvin_offset_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVIN_offset_V, tvin_offset_V);

		sc_bv<1> offset_V_tvin_wrapc_buffer;

		// RTL Name: offset_V
		{
			// bitslice(0, 0)
			{
				// celement: offset.V(0, 0)
				{
					// carray: (0) => (0) @ (0)
					{
						// sub                   : 
						// ori_name              : offset
						// sub_1st_elem          : 
						// ori_name_1st_elem     : offset
						// regulate_c_name       : offset_V
						// input_type_conversion : (offset).to_string(2).c_str()
						if (&(offset) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<1> offset_V_tmp_mem;
							offset_V_tmp_mem = (offset).to_string(2).c_str();
							offset_V_tvin_wrapc_buffer.range(0, 0) = offset_V_tmp_mem.range(0, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 1; i++)
		{
			sprintf(tvin_offset_V, "%s\n", (offset_V_tvin_wrapc_buffer).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVIN_offset_V, tvin_offset_V);
		}

		tcl_file.set_num(1, &tcl_file.offset_V_depth);
		sprintf(tvin_offset_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVIN_offset_V, tvin_offset_V);

// [call_c_dut] ---------->

		CodeState = CALL_C_DUT;
		AESL_ORIG_DUT_freq_serial(freqStream, serialTwoStream, serialThreeStream, seed, n, offset);

		CodeState = DUMP_OUTPUTS;

		// [[transaction]]
		sprintf(tvout_freqStream_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_freqStream_V, tvout_freqStream_V);

		sc_bv<32>* freqStream_V_tvout_wrapc_buffer = new sc_bv<32>[32];

		// RTL Name: freqStream_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: freqStream.V(31, 0)
				{
					// carray: (0) => (31) @ (1)
					for (int i_0 = 0; i_0 <= 31; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : freqStream[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : freqStream[0]
						// regulate_c_name       : freqStream_V
						// input_type_conversion : (freqStream[i_0]).to_string(2).c_str()
						if (&(freqStream[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> freqStream_V_tmp_mem;
							freqStream_V_tmp_mem = (freqStream[i_0]).to_string(2).c_str();
							freqStream_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = freqStream_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 32; i++)
		{
			sprintf(tvout_freqStream_V, "%s\n", (freqStream_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_freqStream_V, tvout_freqStream_V);
		}

		tcl_file.set_num(32, &tcl_file.freqStream_V_depth);
		sprintf(tvout_freqStream_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_freqStream_V, tvout_freqStream_V);

		// release memory allocation
		delete [] freqStream_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_serialTwoStream_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_serialTwoStream_V, tvout_serialTwoStream_V);

		sc_bv<32>* serialTwoStream_V_tvout_wrapc_buffer = new sc_bv<32>[96];

		// RTL Name: serialTwoStream_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: serialTwoStream.V(31, 0)
				{
					// carray: (0) => (95) @ (1)
					for (int i_0 = 0; i_0 <= 95; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : serialTwoStream[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : serialTwoStream[0]
						// regulate_c_name       : serialTwoStream_V
						// input_type_conversion : (serialTwoStream[i_0]).to_string(2).c_str()
						if (&(serialTwoStream[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> serialTwoStream_V_tmp_mem;
							serialTwoStream_V_tmp_mem = (serialTwoStream[i_0]).to_string(2).c_str();
							serialTwoStream_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = serialTwoStream_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 96; i++)
		{
			sprintf(tvout_serialTwoStream_V, "%s\n", (serialTwoStream_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_serialTwoStream_V, tvout_serialTwoStream_V);
		}

		tcl_file.set_num(96, &tcl_file.serialTwoStream_V_depth);
		sprintf(tvout_serialTwoStream_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_serialTwoStream_V, tvout_serialTwoStream_V);

		// release memory allocation
		delete [] serialTwoStream_V_tvout_wrapc_buffer;

		// [[transaction]]
		sprintf(tvout_serialThreeStream_V, "[[transaction]] %d\n", AESL_transaction);
		aesl_fh.write(AUTOTB_TVOUT_serialThreeStream_V, tvout_serialThreeStream_V);

		sc_bv<32>* serialThreeStream_V_tvout_wrapc_buffer = new sc_bv<32>[112];

		// RTL Name: serialThreeStream_V
		{
			// bitslice(31, 0)
			{
				int hls_map_index = 0;
				// celement: serialThreeStream.V(31, 0)
				{
					// carray: (0) => (111) @ (1)
					for (int i_0 = 0; i_0 <= 111; i_0 += 1)
					{
						// sub                   : i_0
						// ori_name              : serialThreeStream[i_0]
						// sub_1st_elem          : 0
						// ori_name_1st_elem     : serialThreeStream[0]
						// regulate_c_name       : serialThreeStream_V
						// input_type_conversion : (serialThreeStream[i_0]).to_string(2).c_str()
						if (&(serialThreeStream[0]) != NULL) // check the null address if the c port is array or others
						{
							sc_lv<32> serialThreeStream_V_tmp_mem;
							serialThreeStream_V_tmp_mem = (serialThreeStream[i_0]).to_string(2).c_str();
							serialThreeStream_V_tvout_wrapc_buffer[hls_map_index++].range(31, 0) = serialThreeStream_V_tmp_mem.range(31, 0);
						}
					}
				}
			}
		}

		// dump tv to file
		for (int i = 0; i < 112; i++)
		{
			sprintf(tvout_serialThreeStream_V, "%s\n", (serialThreeStream_V_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());
			aesl_fh.write(AUTOTB_TVOUT_serialThreeStream_V, tvout_serialThreeStream_V);
		}

		tcl_file.set_num(112, &tcl_file.serialThreeStream_V_depth);
		sprintf(tvout_serialThreeStream_V, "[[/transaction]] \n");
		aesl_fh.write(AUTOTB_TVOUT_serialThreeStream_V, tvout_serialThreeStream_V);

		// release memory allocation
		delete [] serialThreeStream_V_tvout_wrapc_buffer;

		CodeState = DELETE_CHAR_BUFFERS;
		// release memory allocation: "freqStream_V"
		delete [] tvout_freqStream_V;
		// release memory allocation: "serialTwoStream_V"
		delete [] tvout_serialTwoStream_V;
		// release memory allocation: "serialThreeStream_V"
		delete [] tvout_serialThreeStream_V;
		// release memory allocation: "seed_V"
		delete [] tvin_seed_V;
		// release memory allocation: "n_V"
		delete [] tvin_n_V;
		// release memory allocation: "offset_V"
		delete [] tvin_offset_V;

		AESL_transaction++;

		tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);
	}
}

